package com.java.hib;
 
import java.util.List;
 
import javax.faces.component.UICommand;
import javax.faces.event.ActionEvent;
 
public class PaginationBean {
 
	private static final long serialVersionUID = 1L;
	private List<PatientAppointment> ptList;
	private List<PatientAppointment> ptListVisites;	
	private LoginDAOImpl queryHelper;
	
	
	private int totalRows;
	static private int firstRow;
	private int rowsPerPage;
	private int totalPages;
	private int pageRange;
	private Integer[] pages;
	private int currentPage;
	
	
	public PaginationBean() {
		queryHelper = new LoginDAOImpl();
		rowsPerPage = 3; 
		pageRange = 2;
	}
	public List<PatientAppointment> getPatientAppointmentList() {
		if (ptList == null) {
			loadgetPatientAppointmentList();
		}
		return ptList;
	}
	public void setPtList(List<PatientAppointment> ptList) {
		this.ptList = ptList;
	}
	
	public List<PatientAppointment> getPtListVisites() {
		if (ptList == null) {
			loadgetPatientAppointmentListVisites();
		}
		return ptListVisites;
	}
	public void setPtListVisites(List<PatientAppointment> ptListVisites) {
		this.ptListVisites = ptListVisites;
	}
	
	public int getTotalRows() {
		return totalRows;
	}
	public void setTotalRows(int totalRows) {
		this.totalRows = totalRows;
	}
	public int getFirstRow() {
		return firstRow;
	}
	public void setFirstRow(int firstRow) {
		this.firstRow = firstRow;
	}
	public int getRowsPerPage() {
		return rowsPerPage;
	}
	public void setRowsPerPage(int rowsPerPage) {
		this.rowsPerPage = rowsPerPage;
	}
	public int getTotalPages() {
		return totalPages;
	}
	public void setTotalPages(int totalPages) {
		this.totalPages = totalPages;
	}
	public int getPageRange() {
		return pageRange;
	}
	public void setPageRange(int pageRange) {
		this.pageRange = pageRange;
	}
	public Integer[] getPages() {
		return pages;
	}
	public void setPages(Integer[] pages) {
		this.pages = pages;
	}
	public int getCurrentPage() {
		return currentPage;
	}
	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}
 
	private void loadgetPatientAppointmentList() {
	//	System.out.println("First Row " +firstRow);
	//	System.out.println("Count " +rowsPerPage);
		ptList = queryHelper.getPatientAppointmentList(firstRow, rowsPerPage);
//		System.out.println("Insurance Count is " +cdList);
		totalRows = queryHelper.countRows();
		System.out.println("Total Rows " +totalRows);
		// Set currentPage, totalPages and pages.
		currentPage = (totalRows / rowsPerPage) - ((totalRows - firstRow) / rowsPerPage) + 1;
		totalPages = (totalRows / rowsPerPage) + ((totalRows % rowsPerPage != 0) ? 1 : 0);
		int pagesLength = Math.min(pageRange, totalPages);
		pages = new Integer[pagesLength];
		// firstPage must be greater than 0 and lesser than totalPages-pageLength.
		int firstPage = Math.min(Math.max(0, currentPage - (pageRange / 2)), totalPages - pagesLength);
		// Create pages (page numbers for page links).
		for (int i = 0; i < pagesLength; i++) {
			pages[i] = ++firstPage;
		}
	}
	private void loadgetPatientAppointmentListVisites() {
		//	System.out.println("First Row " +firstRow);
		//	System.out.println("Count " +rowsPerPage);
			ptList = queryHelper.getPtListVisites(firstRow, rowsPerPage);
//			System.out.println("Insurance Count is " +cdList);
			totalRows = queryHelper.countRows();
			System.out.println("Total Rows " +totalRows);
			// Set currentPage, totalPages and pages.
			currentPage = (totalRows / rowsPerPage) - ((totalRows - firstRow) / rowsPerPage) + 1;
			totalPages = (totalRows / rowsPerPage) + ((totalRows % rowsPerPage != 0) ? 1 : 0);
			int pagesLength = Math.min(pageRange, totalPages);
			pages = new Integer[pagesLength];
			// firstPage must be greater than 0 and lesser than totalPages-pageLength.
			int firstPage = Math.min(Math.max(0, currentPage - (pageRange / 2)), totalPages - pagesLength);
			// Create pages (page numbers for page links).
			for (int i = 0; i < pagesLength; i++) {
				pages[i] = ++firstPage;
			}
		}
	
	// Paging actions
	// -----------------------------------------------------------------------------
	public void pageFirst() {
		page(0);
	}
	public void pageNext() {
		page(firstRow + rowsPerPage);
	}
	public void pagePrevious() {
		page(firstRow - rowsPerPage);
	}
	public void pageLast() {
		page(totalRows - ((totalRows % rowsPerPage != 0) ? totalRows % rowsPerPage : rowsPerPage));
	}
	public void page(ActionEvent event) {
		page(((Integer) ((UICommand) event.getComponent()).getValue() - 1) * rowsPerPage);
	}
	private void page(int firstRow) {
		this.firstRow = firstRow;
		getPatientAppointmentList();
	}
	private void page(int firstRow) {
		this.firstRow = firstRow;
		getPtListVisites();
	}
}